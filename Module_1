import boto3
import fitz
import json
import csv

# Replace these with your own values
ACCESS_KEY = 'XXXXXXXXXXXXXXXXXXXXXX'
SECRET_KEY = 'XXXXXXXXXXXXXXXXXXXXXXXX'
OUTPUT_FILE = 'output_text_installation.txt'
BUCKET_NAME = 'kamakshigari'
OBJECT_KEY = 'InstallationOperationMaintenance_3393.pdf'  # This is the path to your file in S3
REGION = 'us-east-1'  # e.g., 'us-east-1'

# Initialize a session using your credentials
session = boto3.Session(
    aws_access_key_id=ACCESS_KEY,
    aws_secret_access_key=SECRET_KEY,
    region_name=REGION
)


# Create an S3 client
s3 = session.client('s3')


# Create an S3 client
s3 = session.client('s3')

# Function to download file from S3
def download_file_from_s3(bucket_name, object_key, output_file):
    try:
        response = s3.get_object(Bucket=bucket_name, Key=object_key)
        with open(output_file, 'wb') as file:
            file.write(response['Body'].read())
        print(f"File downloaded from S3: {object_key}")
    except Exception as e:
        print(f"Error downloading {object_key} from {bucket_name}: {e}")

# Function to extract text from PDF
def extract_text_from_pdf(pdf_file):
    text_content = ""
    try:
        pdf_document = fitz.open(pdf_file)
        for page_num in range(len(pdf_document)):
            page = pdf_document.load_page(page_num)
            text_content += page.get_text()
    except Exception as e:
        print(f"Error extracting text from PDF: {e}")
    finally:
        if pdf_document:
            pdf_document.close()
    return text_content

# Function to invoke the Bedrock model
def invoke_bedrock_model(text_content):
    try:
        # Set the model ID and define the prompt
        model_id = "anthropic.claude-3-haiku-20240307-v1:0"
        prompt = (
            f"Analyse document {text_content} and classify this document category type\n"
            f"1. user manual\n"
            f"2. installation manual\n"
            f"3. reference manual\n\n"
            f"along with equipment type. Respond in JSON format."
        )

        # Format the request payload
        request_payload = {
            "anthropic_version": "bedrock-2023-05-31",
            "max_tokens": 512,
            "temperature": 0.5,
            "messages": [
                {
                    "role": "user",
                    "content": [{"type": "text", "text": prompt}],
                }
            ],
        }

        # Convert request payload to JSON
        request_json = json.dumps(request_payload)

        # Invoke the Bedrock model with the request
        brt = session.client(service_name='bedrock-runtime')
        response = brt.invoke_model_with_response_stream(modelId=model_id, body=request_json)

        # Process and return the response
        json_response = ""
        for event in response['body']:
            chunk = json.loads(event['chunk']['bytes'])
            if chunk['type'] == 'content_block_delta':
                json_response += chunk['delta'].get('text', '')

        return json_response

    except Exception as e:
        print(f"Error invoking Bedrock model: {e}")
        return None

# Function to process each file in the bucket
def process_files_in_bucket(bucket_name, output_csv):
    try:
        with open(output_csv, 'w', newline='') as csvfile:
            csvwriter = csv.writer(csvfile)
            csvwriter.writerow(['File Name', 'JSON Response'])

            # List all objects within the bucket
            response = s3.list_objects_v2(Bucket=bucket_name)

            # Iterate over the objects and process each file
            if 'Contents' in response:
                for obj in response['Contents']:
                    object_key = obj['Key']
                    output_file = f"/tmp/{object_key.split('/')[-1]}"  # Adjust output file path as needed

                    # Download file from S3
                    download_file_from_s3(bucket_name, object_key, output_file)

                    # Extract text from PDF
                    text_content = extract_text_from_pdf(output_file)

                    # Invoke Bedrock model
                    json_response = invoke_bedrock_model(text_content)

                    # Write to CSV
                    csvwriter.writerow([object_key, json_response])

                    # Print confirmation
                    print(f"Processed: {object_key}")

    except Exception as e:
        print(f"Error processing files in bucket {bucket_name}: {e}")

# CSV output file
output_csv = 'output_final_1.csv'

# Call the function to process files in the bucket and save results to CSV
process_files_in_bucket(BUCKET_NAME, output_csv)

